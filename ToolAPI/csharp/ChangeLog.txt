3rd March, 2006 - Maarc
	Added Save() routines to ClassicBookScript and ClassicBookSection, and validated them against test books
	Adjusted some protection levels on some functions
	Added ToByteArray() functions that accept int/uint, short/ushort, or string, and chunk out a byte array of a particular length

3rd March, 2006 - Maarc
	Added a ToString() function to Conversion.  It takes either a byte[] or char[] and returns a valid string
	Added InternalReset() functionality to the BaseScript and Section classes.  This allows pre-retrieval resetting of vars for constructed objects (child classes override as necessary)
	Updated and tested the ClassicBookScript and ClassicBookSection classes.  They now read a valid book/pages, but currently does *not* write out!  Saving of books is currently unimplemented
	Added indexing capabilities to ClassicBookScript and ClassicBookSection, as well as hiding some unnecessary functions
	The indexing ensures that a valid page/line is selected (if it doesn't, it returns NULL)
	Look at the basic test driver code below to see how

	Some basic test driver code for books

	foreach( string s in Directory.GetFiles( dirSect.FindTag( "BOOKSDIRECTORY" ), "*.bok" ) )
	{
		UOXData.Script.ClassicBookScript mBook	= new UOXData.Script.ClassicBookScript( s );
		txtPackageDetails.Text			+= mBook.Title + " - " + mBook.Author + System.Environment.NewLine;
		for( int i = 0; i < mBook.NumPages; ++i )
		{
			txtPackageDetails.Text += "Page " + (i+1) + System.Environment.NewLine;
			txtPackageDetails.Text += "=======" + System.Environment.NewLine;
			for( int j = 0; j < 8; ++j )
			{
				// Indexing accessing to a page.  mBook[i] is page i of the book mBook
				UOXData.Script.ClassicBookSection mSection = mBook[i];
				// Indexing accessing to a line.  mSection[j] is the line j of the page mSection
				txtPackageDetails.Text += mSection[j] + System.Environment.NewLine;
			}
		}
	}


2nd March, 2006 - Maarc
	Added a basic ClassicBookScript and ClassicBookSection class.  Note that this is *incomplete*, and requires testing against real data (which I don't have at the moment).
	Added a very basic DictionaryScript and UOXIni class.  They are a subclass of Script, with no additional information.  Essentially, they just *are* normal Scripts, but this way, we can conceptualise it a bit better.

1st March, 2006 - Maarc
	Added a AccountScript and AccountSection class, for dealing with Accounts files
	Fixed a possible bug with script parsing that only became apparent with AccountScript (if the delimiter appeared more than once, we weren't adding it in properly for the value part)
	Added an AddSection routine to BaseScript, so one you create you can readily add in


28th February, 2006 - Maarc
	Updated DefinitionTree so you can get a Collection based on the DFN Category you want (GetCollection() method)
	Added empty constructors for BaseScript(), WorldFile90() and Script(), so that we can create empty ones for populating later (not forced reads)

24th February, 2006 - Maarc
	Added SpawnRegion.cs, DefinitionCollection.cs, and DefinitionTree.cs
	Updated TownRegion parsing code so that it parsees a WorldSection and a ScriptSection separately
	DefinitionContainer = all the definitions dealing with a particular category of DFN
	DefinitionTree = one DefinitionContainer per DFN Cat collection

	eg code for DefinitionTree

		UOXData.Script.DefinitionTree dfnTree = new UOXData.Script.DefinitionTree( dfnPath );
		UOXData.Script.ScriptSection mSect = dfnTree.FindEntry( "RACE 1", UOXData.Script.DFN_Categories.race );
		if( mSect != null )
			System.Windows.Forms.MessageBox.Show( "Hooray!  Race found" );


21st February, 2006 - Maarc
	Updated the ToolAPI so that it now reads/parses TownRegions, from either a worldfile or dfn file